quarkus.banner.enabled = true
#quarkus.kubernetes-config.namespace=anas

%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.config-maps=app-variables

#https://quarkus.io/guides/openapi-swaggerui
#/q/swagger-ui
quarkus.smallrye-openapi.path=/swagger
quarkus.swagger-ui.always-include=true


# DB
quarkus.datasource.db-kind = postgresql

%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${database-service}:5432/${database-name}
%prod.quarkus.datasource.username = ${database-user}
%prod.quarkus.datasource.password = ${database-password}
%prod.quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver


quarkus.datasource.username = dbuser
quarkus.datasource.password = dbpassword
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/quarkus

quarkus.hibernate-orm.log.sql = true
quarkus.hibernate-orm.log.format-sql = true
quarkus.hibernate-orm.database.generation=drop-and-create




# KAFKA
#export BOOTSTRAP_SERVER=mr-kafka-i--scmb--vgqi-adz-imp-mfa-x-q.bf2.kafka.rhcloud.com:443
#export CLIENT_ID=srvc-acct-00b9541e-fff1-427d-8ce8-99fb76f647fc
#export CLIENT_SECRET=0367d8fa-95af-4715-bd9f-ebebd420eea2
#export OAUTH_TOKEN_ENDPOINT_URI=https://identity.api.openshift.com/auth/realms/rhoas/protocol/openid-connect/token


#BOOTSTRAP_SERVER=anas-cluster-kafka-bootstrap:9092
kafka.bootstrap.servers=localhost:9092
%prod.kafka.bootstrap.servers=${kafka-bootstrap-service}:9092

%managed.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%managed.kafka.security.protocol=SASL_SSL
%managed.kafka.sasl.mechanism=OAUTHBEARER
%managed.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%managed.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler


# Kafka Topic
# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.channel-in.connector=smallrye-kafka
mp.messaging.incoming.channel-in.topic=${kafka-topic}
mp.messaging.incoming.channel-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.channel-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.channel-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.channel-out.connector=smallrye-kafka
mp.messaging.outgoing.channel-out.topic=${kafka-topic}
mp.messaging.outgoing.channel-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.channel-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.channel-out.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor

# OPENSHIFT
# ENV
#quarkus.openshift.env.vars.QUARKUS_HTTP_PORT=8181
quarkus.openshift.env.vars.GC_MAX_METASPACE_SIZE=500
#quarkus.openshift.env.vars.QUARKUS_PROFILE=integrazione
# PROBE
quarkus.openshift.readiness-probe.initial-delay=0s
quarkus.openshift.readiness-probe.period=30s
quarkus.openshift.readiness-probe.timeout=10s
quarkus.openshift.liveness-probe.initial-delay=0s
quarkus.openshift.liveness-probe.period=30s
quarkus.openshift.liveness-probe.timeout=10s

# JAGGER
quarkus.jaeger.service-name=quarkus-playapp
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

# KUBERNETES
%ocp.quarkus.kubernetes.deploy=true
#quarkus.kubernetes-client.trust-certs=true
#quarkus.kubernetes-client.namespace=quarkus-play
#quarkus.openshift.name=quarkus-playapp
%ocp.quarkus.openshift.expose=true